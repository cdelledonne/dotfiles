# Global python code
############################################################
global !p

from usutils import CommentFunction, IsFunctionSignature

# Expand snippet for function comment
def AddFunctionComment(f_signature):
	snip.expand_anon(CommentFunction(f_signature))

# Condition of a for loop
def GetForCondition(init):
	return init.split('=')[0].split()[-1] + ' ' if '=' in init else '/* condition */'

# Increment of a for loop
def GetForIncrement(init):
	return init.split('=')[0].split()[-1] if '=' in init else '/* increment */'

# Struct name
def GetStructName(alias):
	return alias[0:-2] + ' ' if alias.endswith('_t') else ''

endglobal
############################################################


# typedef'd struct
############################################################
snippet ts "typedef struct {...}"
typedef struct `!p snip.rv = GetStructName(t[2])`{
	${1:/* members */}
} ${2:/* alias */};
endsnippet


# typedef'd enum
############################################################
snippet te "typedef enum {...}"
typedef enum {
	${1:/* constants */}
} ${2:/* alias */};
endsnippet


# if statement
############################################################
snippet if "if (condition) {...}"
if (${1:/* condition */}) {
	${2:${VISUAL}}
}$0
endsnippet


# switch statement
############################################################
snippet switch "switch (expression) {...}"
switch (${1:/* expression */}) {
	case ${2:/* CONST_EXPR */}:
		${3:/* statements */}
	default:
		${4:/* statements */}
}$0
endsnippet


# while loop
############################################################
snippet while "while (condition) {...}"
while (${1:/* condition */}) {
	${2:${VISUAL:\/* statements *\////}}
}$0
endsnippet


# for loop
############################################################
snippet for "for (init; condition; increment) {...}"
for (${1:/* init */}; `!p snip.rv = GetForCondition(t[1])`$2; `!p snip.rv = GetForIncrement(t[1])`$3) {
	${4:${VISUAL:\/* statements *\////}}
}$0
endsnippet


# printf, with editable function name
############################################################
snippet printf "printf(const char *format, ...)"
${1:printf}("${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet


# TODO
############################################################
snippet todo "// TODO: ..."
// TODO: $1
endsnippet


# TODO, with timestamp
############################################################
snippet todofull "// TODO: ... (user, timestamp)"
// TODO: $1 (`!v expand($USER)`, `!v strftime("%d %b %Y")`)
endsnippet


# Pre-processor ifdef
############################################################
snippet #ifdef "#ifdef ... #endif" b
#ifdef ${1:SYMBOL}
${2:`!p snip.rv = snip.v.text[0:-1] if (len(snip.v.text) > 0 and snip.v.text[-1]) == '\n' else snip.v.text`}
#endif
endsnippet


# Pre-processor if
############################################################
snippet #if "#if ... #endif" b
#if ${1:EXPRESSION}
${2:`!p snip.rv = snip.v.text[0:-1] if (len(snip.v.text) > 0 and snip.v.text[-1]) == '\n' else snip.v.text`}
#endif
endsnippet


# Header guards
############################################################
snippet hguard "#ifndef ... #define ... #endif" b
#ifndef ${1:INCLUDE_`!v substitute(toupper(expand('%:t:r')), "-", "_", "g")`_H}
#define $1


${0:${VISUAL}}


#endif /* $1 */
endsnippet


# Function comment for documentation
############################################################
# Only expand when next line matches function signature
context "IsFunctionSignature(snip.buffer[snip.line + 1])"
# Post-expand snippet
post_jump "AddFunctionComment(snip.buffer[snip.line + 1])"
snippet /** "Function comment" be
endsnippet


# File description
############################################################
snippet fd "File description" b
endsnippet
